[{"uid":"ce225ae6e8d4beee","name":"Test getting authors with non-existent ID returns 404 Not Found","time":{"start":1754902710957,"stop":1754902711420,"duration":463},"status":"passed","severity":"normal"},{"uid":"de8fe7683d2f9649","name":"Test updating author with invalid data returns 400","time":{"start":1754902706023,"stop":1754902706504,"duration":481},"status":"passed","severity":"normal"},{"uid":"7443d1bbb47fb6d7","name":"Test updating a book with invalid data returns 400 with validation errors","time":{"start":1754902706987,"stop":1754902707466,"duration":479},"status":"passed","severity":"normal"},{"uid":"52cb257154f784aa","name":"Test deleting author without specifying ID returns 405 Method Not Allowed","time":{"start":1754902707073,"stop":1754902707559,"duration":486},"status":"passed","severity":"normal"},{"uid":"9d6f3e301114ba39","name":"Test getting authors with valid ID returns 200 and correct author data","time":{"start":1754902710442,"stop":1754902710956,"duration":514},"status":"passed","severity":"normal"},{"uid":"fa542f5223302711","name":"Test deleting a book with non-existent ID returns 404 Not Found","time":{"start":1754902703613,"stop":1754902704122,"duration":509},"status":"failed","severity":"normal"},{"uid":"f943f60c9316a45e","name":"Test getting book by invalid ID format returns 400","time":{"start":1754902701916,"stop":1754902702538,"duration":622},"status":"passed","severity":"normal"},{"uid":"84e8549482625769","name":"Test each author in the authors list has valid positive book ID after fetching all authors","time":{"start":1754902709907,"stop":1754902709916,"duration":9},"status":"passed","severity":"normal"},{"uid":"87d125e7ac4aecbd","name":"Test deleting with invalid ID format returns 400 Bad Request","time":{"start":1754902708523,"stop":1754902708984,"duration":461},"status":"passed","severity":"normal"},{"uid":"b648ad0093e8b049","name":"Test updating author with invalid data returns 400","time":{"start":1754902707004,"stop":1754902707489,"duration":485},"status":"passed","severity":"normal"},{"uid":"530a3dfd4bd6f0f8","name":"Test updating a book with invalid data returns 400 with validation errors","time":{"start":1754902705532,"stop":1754902706016,"duration":484},"status":"passed","severity":"normal"},{"uid":"a41ee61828786443","name":"Test getting all books returns 200","time":{"start":1754902703642,"stop":1754902703642,"duration":0},"status":"passed","severity":"normal"},{"uid":"25905681ea714ab1","name":"Test updating a book with invalid data returns 400 with validation errors","time":{"start":1754902707468,"stop":1754902707950,"duration":482},"status":"passed","severity":"normal"},{"uid":"80ec39104eae647a","name":"Test getting authors with invalid ID formats returns 400 Bad Request","time":{"start":1754902711418,"stop":1754902711897,"duration":479},"status":"passed","severity":"normal"},{"uid":"f7740f3169c310a7","name":"Test getting book by non-existent ID returns 404","time":{"start":1754902700708,"stop":1754902701279,"duration":571},"status":"passed","severity":"normal"},{"uid":"4e2e317d70f9bf35","name":"Test each author in the authors list has valid positive ID after fetching all authors","time":{"start":1754902710292,"stop":1754902710294,"duration":2},"status":"passed","severity":"normal"},{"uid":"ea371db2a457daa","name":"Test getting all Authors returns HTTP 200 status code","time":{"start":1754902710924,"stop":1754902710924,"duration":0},"status":"passed","severity":"normal"},{"uid":"7dcc2dbeba6e307a","name":"Test updating a book with invalid data returns 400 with validation errors","time":{"start":1754902706495,"stop":1754902706986,"duration":491},"status":"passed","severity":"normal"},{"uid":"6ceebeadadde512b","name":"Test getting book by non-existent ID returns 404","time":{"start":1754902701886,"stop":1754902702503,"duration":617},"status":"passed","severity":"normal"},{"uid":"dd02249204906372","name":"Test updating a book with invalid data returns 400 with validation errors","time":{"start":1754902705047,"stop":1754902705530,"duration":483},"status":"passed","severity":"normal"},{"uid":"56e5f5c3eb60a8eb","name":"Test deleting a book with non-existent ID returns 404 Not Found","time":{"start":1754902703068,"stop":1754902703598,"duration":530},"status":"failed","severity":"normal"},{"uid":"b4921e8bbbbe19a0","name":"Test deleting a non-existent author ID returns 404 Not Found","time":{"start":1754902707542,"stop":1754902708029,"duration":487},"status":"failed","severity":"normal"},{"uid":"4cc5ec0dfc0fe783","name":"Test author list is not empty after fetching all authors","time":{"start":1754902710230,"stop":1754902710230,"duration":0},"status":"passed","severity":"normal"},{"uid":"d1f381c819d9cc18","name":"Test each author in the authors list has a non-empty last name after fetching all authors","time":{"start":1754902709899,"stop":1754902709913,"duration":14},"status":"passed","severity":"normal"},{"uid":"55b53738cfc7c609","name":"Test deleting a non-existent author ID returns 404 Not Found","time":{"start":1754902708031,"stop":1754902708506,"duration":475},"status":"failed","severity":"normal"},{"uid":"4907bc9b86668787","name":"Test deleting a book with invalid ID format returns 400 Bad Request","time":{"start":1754902703068,"stop":1754902703575,"duration":507},"status":"passed","severity":"normal"},{"uid":"5385e6b74bd82b34","name":"Test updating author with invalid data returns 400","time":{"start":1754902707492,"stop":1754902707961,"duration":469},"status":"passed","severity":"normal"},{"uid":"7125b16d7a4ae68a","name":"Test book list is not empty after fetching all books","time":{"start":1754902703765,"stop":1754902703766,"duration":1},"status":"passed","severity":"normal"},{"uid":"e8925b3f9d61ebfd","name":"Test creating author with invalid fields returns 400 with validation errors","time":{"start":1754902706105,"stop":1754902706582,"duration":477},"status":"passed","severity":"normal"},{"uid":"370c37edb06f5283","name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","time":{"start":1754902706090,"stop":1754902706579,"duration":489},"status":"passed","severity":"normal"},{"uid":"f675ac8f62c62bfe","name":"Test deleting author with a valid ID returns 200 and author is deleted","time":{"start":1754902706987,"stop":1754902707932,"duration":945},"status":"failed","severity":"normal"},{"uid":"be1c7bf5af9e4516","name":"Test deleting a non-existent author ID returns 404 Not Found","time":{"start":1754902708508,"stop":1754902708994,"duration":486},"status":"failed","severity":"normal"},{"uid":"dce38966119f407b","name":"Test getting authors with invalid ID formats returns 400 Bad Request","time":{"start":1754902710442,"stop":1754902710940,"duration":498},"status":"passed","severity":"normal"},{"uid":"1808e43af441f661","name":"Test deleting with invalid ID format returns 400 Bad Request","time":{"start":1754902708044,"stop":1754902708521,"duration":477},"status":"passed","severity":"normal"},{"uid":"7767ab673ec886ec","name":"Test getting book by invalid ID format returns 400","time":{"start":1754902701325,"stop":1754902701913,"duration":588},"status":"passed","severity":"normal"},{"uid":"41858acc43f88210","name":"Test creating author with invalid fields returns 400 with validation errors","time":{"start":1754902705120,"stop":1754902705609,"duration":489},"status":"passed","severity":"normal"},{"uid":"b79f800c31a7286f","name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","time":{"start":1754902704167,"stop":1754902704661,"duration":494},"status":"passed","severity":"normal"},{"uid":"4710a5d0e3e6ecca","name":"Test getting authors with invalid ID formats returns 400 Bad Request","time":{"start":1754902710941,"stop":1754902711416,"duration":475},"status":"passed","severity":"normal"},{"uid":"50eebef901adc539","name":"Test creating author with invalid fields returns 400 with validation errors","time":{"start":1754902706584,"stop":1754902707068,"duration":484},"status":"passed","severity":"normal"},{"uid":"6f2089ba0ebfa9ec","name":"Test updating a book with valid data returns 200 and updates correctly","time":{"start":1754902705046,"stop":1754902705539,"duration":493},"status":"passed","severity":"normal"},{"uid":"923f6b81279d0f7a","name":"Test getting book by invalid ID format returns 400","time":{"start":1754902700703,"stop":1754902701279,"duration":576},"status":"passed","severity":"normal"},{"uid":"7d6c4f5f73046c1f","name":"Test getting book by valid ID returns 200 OK and book data","time":{"start":1754902700705,"stop":1754902701279,"duration":574},"status":"passed","severity":"normal"},{"uid":"6090f5066efd7408","name":"Test getting book by non-existent ID returns 404","time":{"start":1754902701322,"stop":1754902701873,"duration":551},"status":"passed","severity":"normal"},{"uid":"1d8415abb2d264a9","name":"Test creating author with valid data returns 200 and correct author data","time":{"start":1754902705119,"stop":1754902705608,"duration":489},"status":"passed","severity":"normal"},{"uid":"5c889798e04a0f5f","name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","time":{"start":1754902707072,"stop":1754902707539,"duration":467},"status":"passed","severity":"normal"},{"uid":"346db99f993fecfc","name":"Test creating author with invalid fields returns 400 with validation errors","time":{"start":1754902705617,"stop":1754902706101,"duration":484},"status":"passed","severity":"normal"},{"uid":"24478d01cfb78188","name":"Test creating a book with valid data returns 200 OK and correct book data","time":{"start":1754902704156,"stop":1754902704641,"duration":485},"status":"passed","severity":"normal"},{"uid":"48c1aabba96c2287","name":"Test getting authors with non-existent ID returns 404 Not Found","time":{"start":1754902711421,"stop":1754902711899,"duration":478},"status":"passed","severity":"normal"},{"uid":"629c16806f4e087e","name":"Test getting authors with non-existent ID returns 404 Not Found","time":{"start":1754902710442,"stop":1754902710956,"duration":514},"status":"passed","severity":"normal"},{"uid":"f7e09a1df500012a","name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","time":{"start":1754902704664,"stop":1754902705615,"duration":951},"status":"passed","severity":"normal"},{"uid":"6daa326d3bba18c1","name":"Test updating a book with invalid data returns 400 with validation errors","time":{"start":1754902706019,"stop":1754902706493,"duration":474},"status":"passed","severity":"normal"},{"uid":"934b35b15e1df901","name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","time":{"start":1754902705621,"stop":1754902706088,"duration":467},"status":"passed","severity":"normal"},{"uid":"b32b63a6759c034b","name":"Test deleting a book with non-existent ID returns 404 Not Found","time":{"start":1754902704125,"stop":1754902704605,"duration":480},"status":"failed","severity":"normal"},{"uid":"65bca06e55f0f84a","name":"Test updating author with invalid data returns 400","time":{"start":1754902706508,"stop":1754902707000,"duration":492},"status":"passed","severity":"normal"},{"uid":"2e48367ec5d7597e","name":"Test each author in the authors list has a non-empty first name after fetching all authors","time":{"start":1754902709890,"stop":1754902709907,"duration":17},"status":"passed","severity":"normal"},{"uid":"48f4dc10f3ffddc2","name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","time":{"start":1754902706581,"stop":1754902707070,"duration":489},"status":"passed","severity":"normal"},{"uid":"f05e17a87d0b27e5","name":"Test every book in the book list has a publish date after fetching all books","time":{"start":1754902702505,"stop":1754902702531,"duration":26},"status":"passed","severity":"normal"},{"uid":"ac92f24f5766435a","name":"Test deleting a book with invalid ID format returns 400 Bad Request","time":{"start":1754902703583,"stop":1754902704102,"duration":519},"status":"passed","severity":"normal"},{"uid":"52213266f3e27d2f","name":"Test deleting with invalid ID format returns 400 Bad Request","time":{"start":1754902707563,"stop":1754902708042,"duration":479},"status":"passed","severity":"normal"},{"uid":"8c0aa4a7b62338a","name":"Test deleting a book with valid ID returns 200 and book is deleted","time":{"start":1754902703586,"stop":1754902704559,"duration":973},"status":"passed","severity":"normal"},{"uid":"292cf574fb2aecd2","name":"Test deleting a book with invalid ID format returns 400 Bad Request","time":{"start":1754902704106,"stop":1754902704570,"duration":464},"status":"passed","severity":"normal"},{"uid":"382575fd137f70c0","name":"Test successful updating author with valid data","time":{"start":1754902706024,"stop":1754902706507,"duration":483},"status":"passed","severity":"normal"},{"uid":"4f0ea40e515b9a86","name":"Test every book in the book list has a valid ID after fetching all books","time":{"start":1754902702639,"stop":1754902702642,"duration":3},"status":"passed","severity":"normal"},{"uid":"22b847dbb749a1e7","name":"Test every book in the book list has a non-empty title after fetching all books","time":{"start":1754902702504,"stop":1754902702523,"duration":19},"status":"passed","severity":"normal"},{"uid":"42868d79ea506e97","name":"Test deleting a Book without ID returns 405 Method Not Allowed","time":{"start":1754902703067,"stop":1754902703576,"duration":509},"status":"passed","severity":"normal"}]