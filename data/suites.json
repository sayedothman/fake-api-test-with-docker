{"uid":"98d3104e051c652961429bf95fa0b5d6","name":"suites","children":[{"name":"Book API Test Suite","children":[{"name":"Book API Tests","children":[{"name":"testing.Books.GetBookByIdTests","children":[{"name":"Test getting book by invalid ID format returns 400","uid":"923f6b81279d0f7a","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902700703,"stop":1754902701279,"duration":576},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["**","Asterisks"],"tags":[]},{"name":"Test getting book by valid ID returns 200 OK and book data","uid":"7d6c4f5f73046c1f","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902700705,"stop":1754902701279,"duration":574},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test getting book by non-existent ID returns 404","uid":"f7740f3169c310a7","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902700708,"stop":1754902701279,"duration":571},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["99999","Large ID"],"tags":[]},{"name":"Test getting book by non-existent ID returns 404","uid":"6090f5066efd7408","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902701322,"stop":1754902701873,"duration":551},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["0","Zero ID"],"tags":[]},{"name":"Test getting book by invalid ID format returns 400","uid":"7767ab673ec886ec","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902701325,"stop":1754902701913,"duration":588},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["abc","Alphabetic"],"tags":[]},{"name":"Test getting book by non-existent ID returns 404","uid":"6ceebeadadde512b","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902701886,"stop":1754902702503,"duration":617},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["-1","Negative ID"],"tags":[]},{"name":"Test getting book by invalid ID format returns 400","uid":"f943f60c9316a45e","parentUid":"2aa9c029d87eb053bd88207afdeeb972","status":"passed","time":{"start":1754902701916,"stop":1754902702538,"duration":622},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[" ","Empty Space"],"tags":[]}],"uid":"2aa9c029d87eb053bd88207afdeeb972"},{"name":"testing.Books.GetAllBooksTests","children":[{"name":"Test every book in the book list has a non-empty title after fetching all books","uid":"22b847dbb749a1e7","parentUid":"68d399ea8387528581b0d91f5b8f1b7a","status":"passed","time":{"start":1754902702504,"stop":1754902702523,"duration":19},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test every book in the book list has a publish date after fetching all books","uid":"f05e17a87d0b27e5","parentUid":"68d399ea8387528581b0d91f5b8f1b7a","status":"passed","time":{"start":1754902702505,"stop":1754902702531,"duration":26},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test every book in the book list has a valid ID after fetching all books","uid":"4f0ea40e515b9a86","parentUid":"68d399ea8387528581b0d91f5b8f1b7a","status":"passed","time":{"start":1754902702639,"stop":1754902702642,"duration":3},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test getting all books returns 200","uid":"a41ee61828786443","parentUid":"68d399ea8387528581b0d91f5b8f1b7a","status":"passed","time":{"start":1754902703642,"stop":1754902703642,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test book list is not empty after fetching all books","uid":"7125b16d7a4ae68a","parentUid":"68d399ea8387528581b0d91f5b8f1b7a","status":"passed","time":{"start":1754902703765,"stop":1754902703766,"duration":1},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"68d399ea8387528581b0d91f5b8f1b7a"},{"name":"testing.Books.DeleteBookByIdTests","children":[{"name":"Test deleting a Book without ID returns 405 Method Not Allowed","uid":"42868d79ea506e97","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"passed","time":{"start":1754902703067,"stop":1754902703576,"duration":509},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test deleting a book with non-existent ID returns 404 Not Found","uid":"56e5f5c3eb60a8eb","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"failed","time":{"start":1754902703068,"stop":1754902703598,"duration":530},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["999999","Delete non-existent book ID: 999999"],"tags":[]},{"name":"Test deleting a book with invalid ID format returns 400 Bad Request","uid":"4907bc9b86668787","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"passed","time":{"start":1754902703068,"stop":1754902703575,"duration":507},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["**","Invalid ID format: **"],"tags":[]},{"name":"Test deleting a book with invalid ID format returns 400 Bad Request","uid":"ac92f24f5766435a","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"passed","time":{"start":1754902703583,"stop":1754902704102,"duration":519},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["abc","Invalid ID format: abc"],"tags":[]},{"name":"Test deleting a book with valid ID returns 200 and book is deleted","uid":"8c0aa4a7b62338a","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"passed","time":{"start":1754902703586,"stop":1754902704559,"duration":973},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test deleting a book with non-existent ID returns 404 Not Found","uid":"fa542f5223302711","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"failed","time":{"start":1754902703613,"stop":1754902704122,"duration":509},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["0","Delete with zero ID"],"tags":[]},{"name":"Test deleting a book with invalid ID format returns 400 Bad Request","uid":"292cf574fb2aecd2","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"passed","time":{"start":1754902704106,"stop":1754902704570,"duration":464},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["null","Invalid ID format: null value"],"tags":[]},{"name":"Test deleting a book with non-existent ID returns 404 Not Found","uid":"b32b63a6759c034b","parentUid":"7eba3f37b2290c3b99751d6622267014","status":"failed","time":{"start":1754902704125,"stop":1754902704605,"duration":480},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["-10","Delete with negative ID: -10"],"tags":[]}],"uid":"7eba3f37b2290c3b99751d6622267014"},{"name":"testing.Books.CreateBooksTests","children":[{"name":"Test creating a book with valid data returns 200 OK and correct book data","uid":"24478d01cfb78188","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902704156,"stop":1754902704641,"duration":485},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","uid":"b79f800c31a7286f","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902704167,"stop":1754902704661,"duration":494},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid ID format","BooksInvalidRequest(id=asd, title=Moab Is My Washpot, description=Aut facilis porro possimus aut rerum quis minima hic nemo consequuntur beatae., pageCount=279, excerpt=Vero qui quaerat. Et quos qui repellat sunt modi aut deserunt. Illum est libero quaerat veniam magnam. Hic nobis odit maxime nulla. Optio qui et velit., publishDate=2024-08-11T08:58:24.159887089Z)","$.id","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","uid":"f7e09a1df500012a","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902704664,"stop":1754902705615,"duration":951},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid title format","BooksInvalidRequest(id=180, title=123, description=Aut facilis porro possimus aut rerum quis minima hic nemo consequuntur beatae., pageCount=279, excerpt=Vero qui quaerat. Et quos qui repellat sunt modi aut deserunt. Illum est libero quaerat veniam magnam. Hic nobis odit maxime nulla. Optio qui et velit., publishDate=2024-08-11T08:58:24.159887089Z)","$.title","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","uid":"934b35b15e1df901","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902705621,"stop":1754902706088,"duration":467},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid description format","BooksInvalidRequest(id=180, title=Moab Is My Washpot, description=456, pageCount=279, excerpt=Vero qui quaerat. Et quos qui repellat sunt modi aut deserunt. Illum est libero quaerat veniam magnam. Hic nobis odit maxime nulla. Optio qui et velit., publishDate=2024-08-11T08:58:24.159887089Z)","$.description","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","uid":"370c37edb06f5283","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902706090,"stop":1754902706579,"duration":489},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid pageCount format","BooksInvalidRequest(id=180, title=Moab Is My Washpot, description=Aut facilis porro possimus aut rerum quis minima hic nemo consequuntur beatae., pageCount=d, excerpt=Vero qui quaerat. Et quos qui repellat sunt modi aut deserunt. Illum est libero quaerat veniam magnam. Hic nobis odit maxime nulla. Optio qui et velit., publishDate=2024-08-11T08:58:24.159887089Z)","$.pageCount","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","uid":"48f4dc10f3ffddc2","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902706581,"stop":1754902707070,"duration":489},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid excerpt format","BooksInvalidRequest(id=180, title=Moab Is My Washpot, description=Aut facilis porro possimus aut rerum quis minima hic nemo consequuntur beatae., pageCount=279, excerpt=1, publishDate=2024-08-11T08:58:24.159887089Z)","$.excerpt","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test creating a book with invalid data returns 400 Bad Request with validation errors","uid":"5c889798e04a0f5f","parentUid":"99bfeab548c3e61fd7f1cc1a502b7e22","status":"passed","time":{"start":1754902707072,"stop":1754902707539,"duration":467},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid publishDate format","BooksInvalidRequest(id=180, title=Moab Is My Washpot, description=Aut facilis porro possimus aut rerum quis minima hic nemo consequuntur beatae., pageCount=279, excerpt=Vero qui quaerat. Et quos qui repellat sunt modi aut deserunt. Illum est libero quaerat veniam magnam. Hic nobis odit maxime nulla. Optio qui et velit., publishDate=1)","$.publishDate","The JSON value could not be converted to System\\.DateTime\\. .*"],"tags":[]}],"uid":"99bfeab548c3e61fd7f1cc1a502b7e22"},{"name":"testing.Books.EditBooksTests","children":[{"name":"Test updating a book with valid data returns 200 and updates correctly","uid":"6f2089ba0ebfa9ec","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902705046,"stop":1754902705539,"duration":493},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test updating a book with invalid data returns 400 with validation errors","uid":"dd02249204906372","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902705047,"stop":1754902705530,"duration":483},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid ID format","BooksInvalidRequest(id=bad_id, title=Such, Such Were the Joys, description=Quis nisi sint sit omnis doloribus qui occaecati velit qui dolorem et quia fugiat et., pageCount=739, excerpt=Vel ut accusamus ut. Facere eos suscipit ut porro facilis cupiditate. Fugit ipsum eos reiciendis dolorem., publishDate=2023-08-11T08:58:25.045810091Z)","$.id","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test updating a book with invalid data returns 400 with validation errors","uid":"530a3dfd4bd6f0f8","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902705532,"stop":1754902706016,"duration":484},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid title format","BooksInvalidRequest(id=404, title=123, description=Quis nisi sint sit omnis doloribus qui occaecati velit qui dolorem et quia fugiat et., pageCount=739, excerpt=Vel ut accusamus ut. Facere eos suscipit ut porro facilis cupiditate. Fugit ipsum eos reiciendis dolorem., publishDate=2023-08-11T08:58:25.045810091Z)","$.title","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test updating a book with invalid data returns 400 with validation errors","uid":"6daa326d3bba18c1","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902706019,"stop":1754902706493,"duration":474},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid description format","BooksInvalidRequest(id=404, title=Such, Such Were the Joys, description=true, pageCount=739, excerpt=Vel ut accusamus ut. Facere eos suscipit ut porro facilis cupiditate. Fugit ipsum eos reiciendis dolorem., publishDate=2023-08-11T08:58:25.045810091Z)","$.description","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test updating a book with invalid data returns 400 with validation errors","uid":"7dcc2dbeba6e307a","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902706495,"stop":1754902706986,"duration":491},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid pageCount format","BooksInvalidRequest(id=404, title=Such, Such Were the Joys, description=Quis nisi sint sit omnis doloribus qui occaecati velit qui dolorem et quia fugiat et., pageCount=pages, excerpt=Vel ut accusamus ut. Facere eos suscipit ut porro facilis cupiditate. Fugit ipsum eos reiciendis dolorem., publishDate=2023-08-11T08:58:25.045810091Z)","$.pageCount","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test updating a book with invalid data returns 400 with validation errors","uid":"7443d1bbb47fb6d7","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902706987,"stop":1754902707466,"duration":479},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid excerpt format","BooksInvalidRequest(id=404, title=Such, Such Were the Joys, description=Quis nisi sint sit omnis doloribus qui occaecati velit qui dolorem et quia fugiat et., pageCount=739, excerpt=999, publishDate=2023-08-11T08:58:25.045810091Z)","$.excerpt","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test updating a book with invalid data returns 400 with validation errors","uid":"25905681ea714ab1","parentUid":"5cac3d9574451b3cf351a8a897eb642d","status":"passed","time":{"start":1754902707468,"stop":1754902707950,"duration":482},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid publishDate format","BooksInvalidRequest(id=404, title=Such, Such Were the Joys, description=Quis nisi sint sit omnis doloribus qui occaecati velit qui dolorem et quia fugiat et., pageCount=739, excerpt=Vel ut accusamus ut. Facere eos suscipit ut porro facilis cupiditate. Fugit ipsum eos reiciendis dolorem., publishDate=false)","$.publishDate","The JSON value could not be converted to System\\.DateTime\\. .*"],"tags":[]}],"uid":"5cac3d9574451b3cf351a8a897eb642d"},{"name":"testing.Authors.CreateAuthorsTests","children":[{"name":"Test creating author with valid data returns 200 and correct author data","uid":"1d8415abb2d264a9","parentUid":"03d4c87c8e68d3fab1e681853dd77b84","status":"passed","time":{"start":1754902705119,"stop":1754902705608,"duration":489},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test creating author with invalid fields returns 400 with validation errors","uid":"41858acc43f88210","parentUid":"03d4c87c8e68d3fab1e681853dd77b84","status":"passed","time":{"start":1754902705120,"stop":1754902705609,"duration":489},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid ID format","AuthorsInvalidRequest(id=asd, idBook=127, firstName=Tawanda, lastName=Weimann)","$.id","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test creating author with invalid fields returns 400 with validation errors","uid":"346db99f993fecfc","parentUid":"03d4c87c8e68d3fab1e681853dd77b84","status":"passed","time":{"start":1754902705617,"stop":1754902706101,"duration":484},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid bookID format","AuthorsInvalidRequest(id=158, idBook=abc, firstName=Tawanda, lastName=Weimann)","$.idBook","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test creating author with invalid fields returns 400 with validation errors","uid":"e8925b3f9d61ebfd","parentUid":"03d4c87c8e68d3fab1e681853dd77b84","status":"passed","time":{"start":1754902706105,"stop":1754902706582,"duration":477},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid firstName format","AuthorsInvalidRequest(id=158, idBook=127, firstName=123, lastName=Weimann)","$.firstName","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test creating author with invalid fields returns 400 with validation errors","uid":"50eebef901adc539","parentUid":"03d4c87c8e68d3fab1e681853dd77b84","status":"passed","time":{"start":1754902706584,"stop":1754902707068,"duration":484},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid lastName format","AuthorsInvalidRequest(id=158, idBook=127, firstName=Tawanda, lastName=456)","$.lastName","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]}],"uid":"03d4c87c8e68d3fab1e681853dd77b84"},{"name":"testing.Authors.EditAuthorsTests","children":[{"name":"Test updating author with invalid data returns 400","uid":"de8fe7683d2f9649","parentUid":"665118ed72a5c3ea78d5e74f73c6afc4","status":"passed","time":{"start":1754902706023,"stop":1754902706504,"duration":481},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid ID format","AuthorsInvalidRequest(id=bad_id, idBook=253, firstName=Vanesa, lastName=Smith)","$.id","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test successful updating author with valid data","uid":"382575fd137f70c0","parentUid":"665118ed72a5c3ea78d5e74f73c6afc4","status":"passed","time":{"start":1754902706024,"stop":1754902706507,"duration":483},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test updating author with invalid data returns 400","uid":"65bca06e55f0f84a","parentUid":"665118ed72a5c3ea78d5e74f73c6afc4","status":"passed","time":{"start":1754902706508,"stop":1754902707000,"duration":492},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid bookID format","AuthorsInvalidRequest(id=774, idBook=not_a_number, firstName=Vanesa, lastName=Smith)","$.idBook","The JSON value could not be converted to System\\.Int32\\. .*"],"tags":[]},{"name":"Test updating author with invalid data returns 400","uid":"b648ad0093e8b049","parentUid":"665118ed72a5c3ea78d5e74f73c6afc4","status":"passed","time":{"start":1754902707004,"stop":1754902707489,"duration":485},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid firstName format","AuthorsInvalidRequest(id=774, idBook=253, firstName=123, lastName=Smith)","$.firstName","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]},{"name":"Test updating author with invalid data returns 400","uid":"5385e6b74bd82b34","parentUid":"665118ed72a5c3ea78d5e74f73c6afc4","status":"passed","time":{"start":1754902707492,"stop":1754902707961,"duration":469},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Invalid lastName format","AuthorsInvalidRequest(id=774, idBook=253, firstName=Vanesa, lastName=true)","$.lastName","The JSON value could not be converted to System\\.String\\. .*"],"tags":[]}],"uid":"665118ed72a5c3ea78d5e74f73c6afc4"},{"name":"testing.Authors.DeleteAuthorByIdTests","children":[{"name":"Test deleting author with a valid ID returns 200 and author is deleted","uid":"f675ac8f62c62bfe","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"failed","time":{"start":1754902706987,"stop":1754902707932,"duration":945},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test deleting author without specifying ID returns 405 Method Not Allowed","uid":"52cb257154f784aa","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"passed","time":{"start":1754902707073,"stop":1754902707559,"duration":486},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test deleting a non-existent author ID returns 404 Not Found","uid":"b4921e8bbbbe19a0","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"failed","time":{"start":1754902707542,"stop":1754902708029,"duration":487},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["999999","Non-existent ID: 999999"],"tags":[]},{"name":"Test deleting with invalid ID format returns 400 Bad Request","uid":"52213266f3e27d2f","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"passed","time":{"start":1754902707563,"stop":1754902708042,"duration":479},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["**","Special characters: **"],"tags":[]},{"name":"Test deleting a non-existent author ID returns 404 Not Found","uid":"55b53738cfc7c609","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"failed","time":{"start":1754902708031,"stop":1754902708506,"duration":475},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["0","Zero ID"],"tags":[]},{"name":"Test deleting with invalid ID format returns 400 Bad Request","uid":"1808e43af441f661","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"passed","time":{"start":1754902708044,"stop":1754902708521,"duration":477},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["abc","Alphabetic ID: abc"],"tags":[]},{"name":"Test deleting a non-existent author ID returns 404 Not Found","uid":"be1c7bf5af9e4516","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"failed","time":{"start":1754902708508,"stop":1754902708994,"duration":486},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["-10","Negative ID: -10"],"tags":[]},{"name":"Test deleting with invalid ID format returns 400 Bad Request","uid":"87d125e7ac4aecbd","parentUid":"89d3b67e30f44f76ddaf18e2465c45a6","status":"passed","time":{"start":1754902708523,"stop":1754902708984,"duration":461},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["null","Null ID"],"tags":[]}],"uid":"89d3b67e30f44f76ddaf18e2465c45a6"},{"name":"testing.Authors.GetAllAuthorsTests","children":[{"name":"Test each author in the authors list has a non-empty first name after fetching all authors","uid":"2e48367ec5d7597e","parentUid":"92a909e1409a4e7979117783edda2960","status":"passed","time":{"start":1754902709890,"stop":1754902709907,"duration":17},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test each author in the authors list has a non-empty last name after fetching all authors","uid":"d1f381c819d9cc18","parentUid":"92a909e1409a4e7979117783edda2960","status":"passed","time":{"start":1754902709899,"stop":1754902709913,"duration":14},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test each author in the authors list has valid positive book ID after fetching all authors","uid":"84e8549482625769","parentUid":"92a909e1409a4e7979117783edda2960","status":"passed","time":{"start":1754902709907,"stop":1754902709916,"duration":9},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test author list is not empty after fetching all authors","uid":"4cc5ec0dfc0fe783","parentUid":"92a909e1409a4e7979117783edda2960","status":"passed","time":{"start":1754902710230,"stop":1754902710230,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test each author in the authors list has valid positive ID after fetching all authors","uid":"4e2e317d70f9bf35","parentUid":"92a909e1409a4e7979117783edda2960","status":"passed","time":{"start":1754902710292,"stop":1754902710294,"duration":2},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test getting all Authors returns HTTP 200 status code","uid":"ea371db2a457daa","parentUid":"92a909e1409a4e7979117783edda2960","status":"passed","time":{"start":1754902710924,"stop":1754902710924,"duration":0},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"92a909e1409a4e7979117783edda2960"},{"name":"testing.Authors.GetAuthorByIdTests","children":[{"name":"Test getting authors with non-existent ID returns 404 Not Found","uid":"629c16806f4e087e","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902710442,"stop":1754902710956,"duration":514},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["99999","Non-existent large author ID: 99999"],"tags":[]},{"name":"Test getting authors with invalid ID formats returns 400 Bad Request","uid":"dce38966119f407b","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902710442,"stop":1754902710940,"duration":498},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["**","Invalid ID format: **"],"tags":[]},{"name":"Test getting authors with valid ID returns 200 and correct author data","uid":"9d6f3e301114ba39","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902710442,"stop":1754902710956,"duration":514},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"Test getting authors with invalid ID formats returns 400 Bad Request","uid":"4710a5d0e3e6ecca","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902710941,"stop":1754902711416,"duration":475},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["abc","Invalid ID format: abc"],"tags":[]},{"name":"Test getting authors with non-existent ID returns 404 Not Found","uid":"ce225ae6e8d4beee","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902710957,"stop":1754902711420,"duration":463},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["0","Non-existent zero author ID: 0"],"tags":[]},{"name":"Test getting authors with invalid ID formats returns 400 Bad Request","uid":"80ec39104eae647a","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902711418,"stop":1754902711897,"duration":479},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[" ","Invalid ID format: empty space"],"tags":[]},{"name":"Test getting authors with non-existent ID returns 404 Not Found","uid":"48c1aabba96c2287","parentUid":"b8b4795cd00a20c017ccf24c9e70d043","status":"passed","time":{"start":1754902711421,"stop":1754902711899,"duration":478},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["-1","Non-existent negative author ID: -1"],"tags":[]}],"uid":"b8b4795cd00a20c017ccf24c9e70d043"}],"uid":"5c92b9ac783daa7482af5eb5ada02ac9"}],"uid":"2bec6f903b2a833de8bfaee4cc0fcfe1"}]}