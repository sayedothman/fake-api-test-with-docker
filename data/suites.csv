"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","483","Book API Test Suite","Book API Tests","testing.Authors.EditAuthorsTests","testing.Authors.EditAuthorsTests","testUpdateAuthor_ValidData_ShouldSucceed","Test successful updating author with valid data","Ensure that updating an existing author with valid data via PUT /Authors/{id} returns 200 OK and updates the author's information accurately."
"passed","Mon Aug 11 08:58:29 UTC 2025","Mon Aug 11 08:58:29 UTC 2025","17","Book API Test Suite","Book API Tests","testing.Authors.GetAllAuthorsTests","testing.Authors.GetAllAuthorsTests","testGetAllAuthors_EachAuthorHasNonEmptyFirstName","Test each author in the authors list has a non-empty first name after fetching all authors","Check that every author's first name is neither null nor blank"
"passed","Mon Aug 11 08:58:24 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","485","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_ValidPayload_ShouldCreateBookSuccessfully","Test creating a book with valid data returns 200 OK and correct book data","Ensure POST /Books with a valid book payload returns 200 OK and the created book fields match the request"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","489","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_InvalidPayload_ShouldReturn400","Test creating a book with invalid data returns 400 Bad Request with validation errors","Ensure POST /Books with invalid book fields returns 400 Bad Request and appropriate validation error messages"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:30 UTC 2025","514","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_NonExistentId_ShouldReturn404","Test getting authors with non-existent ID returns 404 Not Found","Verify that requesting authors with valid but non-existent IDs returns 404 Not Found with appropriate error response"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","491","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_InvalidData_ShouldReturn400","Test updating a book with invalid data returns 400 with validation errors","Ensure that PUT /Books/{id} with invalid fields returns HTTP 400 Bad Request and relevant validation errors"
"passed","Mon Aug 11 08:58:20 UTC 2025","Mon Aug 11 08:58:21 UTC 2025","574","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBookB_ValidId_ShouldReturnBookDetails","Test getting book by valid ID returns 200 OK and book data","Ensure GET /Books/{id} with a valid ID returns 200 OK and book data"
"passed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:23 UTC 2025","1","Book API Test Suite","Book API Tests","testing.Books.GetAllBooksTests","testing.Books.GetAllBooksTests","testGetAllBooks_ShouldReturnNonEmptyList","Test book list is not empty after fetching all books","Ensure the returned book list from GET /Books is not empty"
"passed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","519","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_InvalidIdFormat_ShouldReturn400","Test deleting a book with invalid ID format returns 400 Bad Request","Ensure DELETE /Books/{id} with invalid ID formats returns 400 Bad Request and proper validation errors"
"failed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:23 UTC 2025","530","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_NonExistentId_ShouldReturn404","Test deleting a book with non-existent ID returns 404 Not Found","Ensure DELETE /Books/{id} on non-existent but valid IDs returns 404 Not Found"
"passed","Mon Aug 11 08:58:24 UTC 2025","Mon Aug 11 08:58:25 UTC 2025","951","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_InvalidPayload_ShouldReturn400","Test creating a book with invalid data returns 400 Bad Request with validation errors","Ensure POST /Books with invalid book fields returns 400 Bad Request and appropriate validation error messages"
"passed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","467","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_InvalidPayload_ShouldReturn400","Test creating a book with invalid data returns 400 Bad Request with validation errors","Ensure POST /Books with invalid book fields returns 400 Bad Request and appropriate validation error messages"
"passed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:23 UTC 2025","509","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_MissingId_ShouldReturn405","Test deleting a Book without ID returns 405 Method Not Allowed","Ensure DELETE request to /Books endpoint without a book ID path parameter returns 405 Method Not Allowed"
"passed","Mon Aug 11 08:58:24 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","464","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_InvalidIdFormat_ShouldReturn400","Test deleting a book with invalid ID format returns 400 Bad Request","Ensure DELETE /Books/{id} with invalid ID formats returns 400 Bad Request and proper validation errors"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","474","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_InvalidData_ShouldReturn400","Test updating a book with invalid data returns 400 with validation errors","Ensure that PUT /Books/{id} with invalid fields returns HTTP 400 Bad Request and relevant validation errors"
"failed","Mon Aug 11 08:58:28 UTC 2025","Mon Aug 11 08:58:28 UTC 2025","475","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteNonExistentAuthor_ShouldReturn404","Test deleting a non-existent author ID returns 404 Not Found","DELETE /Authors/{id} on non-existent IDs returns 404 Not Found"
"passed","Mon Aug 11 08:58:21 UTC 2025","Mon Aug 11 08:58:21 UTC 2025","588","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBook_InvalidIdFormat_ShouldReturn400","Test getting book by invalid ID format returns 400","Ensure GET /Books/{id} with invalid formats returns 400 and relevant validation errors"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:31 UTC 2025","475","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_InvalidIdFormat_ShouldReturn400","Test getting authors with invalid ID formats returns 400 Bad Request","Verify that GET /Authors/{id} with invalid ID formats returns 400 Bad Request and validation error details"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:30 UTC 2025","0","Book API Test Suite","Book API Tests","testing.Authors.GetAllAuthorsTests","testing.Authors.GetAllAuthorsTests","testGetAllAuthors_ShouldReturnNonEmptyAuthorList","Test author list is not empty after fetching all authors","Verify that the list of authors returned by GET /Authors is not empty"
"passed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","486","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteAuthorWithoutId_ShouldReturn405","Test deleting author without specifying ID returns 405 Method Not Allowed","DELETE /Authors without a specified ID returns 405 Method Not Allowed"
"passed","Mon Aug 11 08:58:22 UTC 2025","Mon Aug 11 08:58:22 UTC 2025","26","Book API Test Suite","Book API Tests","testing.Books.GetAllBooksTests","testing.Books.GetAllBooksTests","testEachBook_ShouldHavePublishDate","Test every book in the book list has a publish date after fetching all books","Ensure each book returned from GET /Books has a publish date field"
"passed","Mon Aug 11 08:58:20 UTC 2025","Mon Aug 11 08:58:21 UTC 2025","571","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBook_NonExistentId_ShouldReturn404","Test getting book by non-existent ID returns 404","Ensure non-existent but valid IDs return 404 Not Found"
"passed","Mon Aug 11 08:58:24 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","494","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_InvalidPayload_ShouldReturn400","Test creating a book with invalid data returns 400 Bad Request with validation errors","Ensure POST /Books with invalid book fields returns 400 Bad Request and appropriate validation error messages"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:30 UTC 2025","2","Book API Test Suite","Book API Tests","testing.Authors.GetAllAuthorsTests","testing.Authors.GetAllAuthorsTests","testGetAllAuthors_EachAuthorHasValidId","Test each author in the authors list has valid positive ID after fetching all authors","Validate that every author in the retrieved list has an ID greater than zero"
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:25 UTC 2025","489","Book API Test Suite","Book API Tests","testing.Authors.CreateAuthorsTests","testing.Authors.CreateAuthorsTests","testCreateAuthorWithInvalidFields_ShouldReturn400WithErrors","Test creating author with invalid fields returns 400 with validation errors","Ensure POST /Authors with invalid field types returns 400 Bad Request and proper error messages"
"failed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","509","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_NonExistentId_ShouldReturn404","Test deleting a book with non-existent ID returns 404 Not Found","Ensure DELETE /Books/{id} on non-existent but valid IDs returns 404 Not Found"
"passed","Mon Aug 11 08:58:20 UTC 2025","Mon Aug 11 08:58:21 UTC 2025","576","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBook_InvalidIdFormat_ShouldReturn400","Test getting book by invalid ID format returns 400","Ensure GET /Books/{id} with invalid formats returns 400 and relevant validation errors"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","477","Book API Test Suite","Book API Tests","testing.Authors.CreateAuthorsTests","testing.Authors.CreateAuthorsTests","testCreateAuthorWithInvalidFields_ShouldReturn400WithErrors","Test creating author with invalid fields returns 400 with validation errors","Ensure POST /Authors with invalid field types returns 400 Bad Request and proper error messages"
"passed","Mon Aug 11 08:58:29 UTC 2025","Mon Aug 11 08:58:29 UTC 2025","14","Book API Test Suite","Book API Tests","testing.Authors.GetAllAuthorsTests","testing.Authors.GetAllAuthorsTests","testGetAllAuthors_EachAuthorHasNonEmptyLastName","Test each author in the authors list has a non-empty last name after fetching all authors","Check that every author's last name is neither null nor blank"
"passed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:23 UTC 2025","507","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_InvalidIdFormat_ShouldReturn400","Test deleting a book with invalid ID format returns 400 Bad Request","Ensure DELETE /Books/{id} with invalid ID formats returns 400 Bad Request and proper validation errors"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:30 UTC 2025","0","Book API Test Suite","Book API Tests","testing.Authors.GetAllAuthorsTests","testing.Authors.GetAllAuthorsTests","testGetAllAuthors_ShouldReturnStatus200","Test getting all Authors returns HTTP 200 status code","Verify that the GET request to /Authors returns HTTP 200 OK status"
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:25 UTC 2025","489","Book API Test Suite","Book API Tests","testing.Authors.CreateAuthorsTests","testing.Authors.CreateAuthorsTests","testCreateAuthorWithValidPayload_ShouldReturn200AndMatchRequest","Test creating author with valid data returns 200 and correct author data","Ensure POST /Authors with valid payload returns 200 OK and author fields match the request"
"passed","Mon Aug 11 08:58:21 UTC 2025","Mon Aug 11 08:58:22 UTC 2025","617","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBook_NonExistentId_ShouldReturn404","Test getting book by non-existent ID returns 404","Ensure non-existent but valid IDs return 404 Not Found"
"passed","Mon Aug 11 08:58:31 UTC 2025","Mon Aug 11 08:58:31 UTC 2025","479","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_InvalidIdFormat_ShouldReturn400","Test getting authors with invalid ID formats returns 400 Bad Request","Verify that GET /Authors/{id} with invalid ID formats returns 400 Bad Request and validation error details"
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:25 UTC 2025","493","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_ValidData_ShouldReturnUpdatedBook","Test updating a book with valid data returns 200 and updates correctly","Ensure that a valid update request to PUT /Books/{id} returns HTTP 200 OK and fields are correctly updated"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","489","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_InvalidPayload_ShouldReturn400","Test creating a book with invalid data returns 400 Bad Request with validation errors","Ensure POST /Books with invalid book fields returns 400 Bad Request and appropriate validation error messages"
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","484","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_InvalidData_ShouldReturn400","Test updating a book with invalid data returns 400 with validation errors","Ensure that PUT /Books/{id} with invalid fields returns HTTP 400 Bad Request and relevant validation errors"
"passed","Mon Aug 11 08:58:21 UTC 2025","Mon Aug 11 08:58:22 UTC 2025","622","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBook_InvalidIdFormat_ShouldReturn400","Test getting book by invalid ID format returns 400","Ensure GET /Books/{id} with invalid formats returns 400 and relevant validation errors"
"passed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","485","Book API Test Suite","Book API Tests","testing.Authors.EditAuthorsTests","testing.Authors.EditAuthorsTests","testUpdateAuthor_InvalidPayload_ShouldReturn400","Test updating author with invalid data returns 400","Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message."
"passed","Mon Aug 11 08:58:28 UTC 2025","Mon Aug 11 08:58:28 UTC 2025","477","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteWithInvalidIdFormat_ShouldReturn400","Test deleting with invalid ID format returns 400 Bad Request","DELETE /Authors/{id} with invalid ID formats returns 400 Bad Request with validation error"
"passed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","469","Book API Test Suite","Book API Tests","testing.Authors.EditAuthorsTests","testing.Authors.EditAuthorsTests","testUpdateAuthor_InvalidPayload_ShouldReturn400","Test updating author with invalid data returns 400","Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message."
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:25 UTC 2025","483","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_InvalidData_ShouldReturn400","Test updating a book with invalid data returns 400 with validation errors","Ensure that PUT /Books/{id} with invalid fields returns HTTP 400 Bad Request and relevant validation errors"
"failed","Mon Aug 11 08:58:24 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","480","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_NonExistentId_ShouldReturn404","Test deleting a book with non-existent ID returns 404 Not Found","Ensure DELETE /Books/{id} on non-existent but valid IDs returns 404 Not Found"
"passed","Mon Aug 11 08:58:22 UTC 2025","Mon Aug 11 08:58:22 UTC 2025","3","Book API Test Suite","Book API Tests","testing.Books.GetAllBooksTests","testing.Books.GetAllBooksTests","testEachBook_ShouldHaveValidId","Test every book in the book list has a valid ID after fetching all books","Ensure each book returned from GET /Books has a valid (greater than zero) ID"
"passed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:24 UTC 2025","973","Book API Test Suite","Book API Tests","testing.Books.DeleteBookByIdTests","testing.Books.DeleteBookByIdTests","testDeleteBook_ValidId_ShouldDeleteBookSuccessfully","Test deleting a book with valid ID returns 200 and book is deleted","Ensure DELETE /Books/{id} with a valid existing ID returns 200 OK and the book is no longer retrievable"
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","467","Book API Test Suite","Book API Tests","testing.Books.CreateBooksTests","testing.Books.CreateBooksTests","testCreateBook_InvalidPayload_ShouldReturn400","Test creating a book with invalid data returns 400 Bad Request with validation errors","Ensure POST /Books with invalid book fields returns 400 Bad Request and appropriate validation error messages"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:30 UTC 2025","498","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_InvalidIdFormat_ShouldReturn400","Test getting authors with invalid ID formats returns 400 Bad Request","Verify that GET /Authors/{id} with invalid ID formats returns 400 Bad Request and validation error details"
"passed","Mon Aug 11 08:58:22 UTC 2025","Mon Aug 11 08:58:22 UTC 2025","19","Book API Test Suite","Book API Tests","testing.Books.GetAllBooksTests","testing.Books.GetAllBooksTests","testEachBook_ShouldHaveNonEmptyTitle","Test every book in the book list has a non-empty title after fetching all books","Ensure each book returned from GET /Books has a non-empty, non-null title"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:31 UTC 2025","463","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_NonExistentId_ShouldReturn404","Test getting authors with non-existent ID returns 404 Not Found","Verify that requesting authors with valid but non-existent IDs returns 404 Not Found with appropriate error response"
"passed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:28 UTC 2025","479","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteWithInvalidIdFormat_ShouldReturn400","Test deleting with invalid ID format returns 400 Bad Request","DELETE /Authors/{id} with invalid ID formats returns 400 Bad Request with validation error"
"passed","Mon Aug 11 08:58:29 UTC 2025","Mon Aug 11 08:58:29 UTC 2025","9","Book API Test Suite","Book API Tests","testing.Authors.GetAllAuthorsTests","testing.Authors.GetAllAuthorsTests","testGetAllAuthors_EachAuthorHasValidBookId","Test each author in the authors list has valid positive book ID after fetching all authors","Validate that every author has a bookID greater than zero"
"passed","Mon Aug 11 08:58:25 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","484","Book API Test Suite","Book API Tests","testing.Authors.CreateAuthorsTests","testing.Authors.CreateAuthorsTests","testCreateAuthorWithInvalidFields_ShouldReturn400WithErrors","Test creating author with invalid fields returns 400 with validation errors","Ensure POST /Authors with invalid field types returns 400 Bad Request and proper error messages"
"passed","Mon Aug 11 08:58:28 UTC 2025","Mon Aug 11 08:58:28 UTC 2025","461","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteWithInvalidIdFormat_ShouldReturn400","Test deleting with invalid ID format returns 400 Bad Request","DELETE /Authors/{id} with invalid ID formats returns 400 Bad Request with validation error"
"passed","Mon Aug 11 08:58:21 UTC 2025","Mon Aug 11 08:58:21 UTC 2025","551","Book API Test Suite","Book API Tests","testing.Books.GetBookByIdTests","testing.Books.GetBookByIdTests","testGetBook_NonExistentId_ShouldReturn404","Test getting book by non-existent ID returns 404","Ensure non-existent but valid IDs return 404 Not Found"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","492","Book API Test Suite","Book API Tests","testing.Authors.EditAuthorsTests","testing.Authors.EditAuthorsTests","testUpdateAuthor_InvalidPayload_ShouldReturn400","Test updating author with invalid data returns 400","Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message."
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:26 UTC 2025","481","Book API Test Suite","Book API Tests","testing.Authors.EditAuthorsTests","testing.Authors.EditAuthorsTests","testUpdateAuthor_InvalidPayload_ShouldReturn400","Test updating author with invalid data returns 400","Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message."
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","479","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_InvalidData_ShouldReturn400","Test updating a book with invalid data returns 400 with validation errors","Ensure that PUT /Books/{id} with invalid fields returns HTTP 400 Bad Request and relevant validation errors"
"failed","Mon Aug 11 08:58:28 UTC 2025","Mon Aug 11 08:58:28 UTC 2025","486","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteNonExistentAuthor_ShouldReturn404","Test deleting a non-existent author ID returns 404 Not Found","DELETE /Authors/{id} on non-existent IDs returns 404 Not Found"
"passed","Mon Aug 11 08:58:30 UTC 2025","Mon Aug 11 08:58:30 UTC 2025","514","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_ValidId_ShouldReturnAuthorSuccessfully","Test getting authors with valid ID returns 200 and correct author data","Verify that fetching an author by a valid ID returns 200 OK and the author data matches the requested ID"
"failed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","945","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteAuthorByValidId_ShouldSucceed","Test deleting author with a valid ID returns 200 and author is deleted","Ensure DELETE /Authors/{id} with existing ID returns 200 and author is deleted"
"passed","Mon Aug 11 08:58:31 UTC 2025","Mon Aug 11 08:58:31 UTC 2025","478","Book API Test Suite","Book API Tests","testing.Authors.GetAuthorByIdTests","testing.Authors.GetAuthorByIdTests","testGetAuthorById_NonExistentId_ShouldReturn404","Test getting authors with non-existent ID returns 404 Not Found","Verify that requesting authors with valid but non-existent IDs returns 404 Not Found with appropriate error response"
"passed","Mon Aug 11 08:58:26 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","484","Book API Test Suite","Book API Tests","testing.Authors.CreateAuthorsTests","testing.Authors.CreateAuthorsTests","testCreateAuthorWithInvalidFields_ShouldReturn400WithErrors","Test creating author with invalid fields returns 400 with validation errors","Ensure POST /Authors with invalid field types returns 400 Bad Request and proper error messages"
"failed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:28 UTC 2025","487","Book API Test Suite","Book API Tests","testing.Authors.DeleteAuthorByIdTests","testing.Authors.DeleteAuthorByIdTests","testDeleteNonExistentAuthor_ShouldReturn404","Test deleting a non-existent author ID returns 404 Not Found","DELETE /Authors/{id} on non-existent IDs returns 404 Not Found"
"passed","Mon Aug 11 08:58:27 UTC 2025","Mon Aug 11 08:58:27 UTC 2025","482","Book API Test Suite","Book API Tests","testing.Books.EditBooksTests","testing.Books.EditBooksTests","testUpdateBook_InvalidData_ShouldReturn400","Test updating a book with invalid data returns 400 with validation errors","Ensure that PUT /Books/{id} with invalid fields returns HTTP 400 Bad Request and relevant validation errors"
"passed","Mon Aug 11 08:58:23 UTC 2025","Mon Aug 11 08:58:23 UTC 2025","0","Book API Test Suite","Book API Tests","testing.Books.GetAllBooksTests","testing.Books.GetAllBooksTests","testGetAllBooks_ShouldReturn200","Test getting all books returns 200","Ensure GET /Books returns HTTP 200 OK"
