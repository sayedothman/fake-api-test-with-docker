{"uid":"de8fe7683d2f9649","name":"Test updating author with invalid data returns 400","fullName":"testing.Authors.EditAuthorsTests.testUpdateAuthor_InvalidPayload_ShouldReturn400","historyId":"ad65fe4b5f1769e614efc1d5fc7f97b2","time":{"start":1754902706023,"stop":1754902706504,"duration":481},"description":"Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message.","descriptionHtml":"<p>Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1754902705541,"stop":1754902706021,"duration":480},"description":"","status":"passed","steps":[],"attachments":[{"uid":"7a835790525f047a","name":"Request","source":"7a835790525f047a.html","type":"text/html","size":748},{"uid":"7e6704472b9ebaa","name":"HTTP/1.1 200 OK","source":"7e6704472b9ebaa.html","type":"text/html","size":540}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true}],"testStage":{"description":"Ensure that updating an author with invalid field types via PUT /Authors/{id} returns a 400 Bad Request and includes the appropriate validation error message.","status":"passed","steps":[{"name":"Executing test case: Invalid ID format","time":{"start":1754902706023,"stop":1754902706023,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Assert that the response status code is 400 Bad Request","time":{"start":1754902706503,"stop":1754902706503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Validate that the correct error message is returned for: $.id","time":{"start":1754902706503,"stop":1754902706503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[{"uid":"8de8f6130c2456a0","name":"Request","source":"8de8f6130c2456a0.html","type":"text/html","size":780},{"uid":"5e683f8545996e56","name":"HTTP/1.1 400 Bad Request","source":"5e683f8545996e56.html","type":"text/html","size":834}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"package","value":"testing.Authors.EditAuthorsTests"},{"name":"testClass","value":"testing.Authors.EditAuthorsTests"},{"name":"testMethod","value":"testUpdateAuthor_InvalidPayload_ShouldReturn400"},{"name":"parentSuite","value":"Book API Test Suite"},{"name":"suite","value":"Book API Tests"},{"name":"subSuite","value":"testing.Authors.EditAuthorsTests"},{"name":"host","value":"cb03e908f4c6"},{"name":"thread","value":"57@cb03e908f4c6.TestNG-test-Book API Tests-4(22)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"},{"name":"epic","value":"Edit Authors Tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"arg0","value":"Invalid ID format"},{"name":"arg1","value":"AuthorsInvalidRequest(id=bad_id, idBook=253, firstName=Vanesa, lastName=Smith)"},{"name":"arg2","value":"$.id"},{"name":"arg3","value":"The JSON value could not be converted to System\\.Int32\\. .*"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"de8fe7683d2f9649.json","parameterValues":["Invalid ID format","AuthorsInvalidRequest(id=bad_id, idBook=253, firstName=Vanesa, lastName=Smith)","$.id","The JSON value could not be converted to System\\.Int32\\. .*"]}